///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace SWA_1_6_5_Release_Specific_Test_cases.CommonFlows
{
	public partial class Installation
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
			
			
		}

		public void Validations()
		{
			// TODO: Replace the following line with your code implementation.
			throw new NotImplementedException();
		}
		
		public static void installationComplete(){
			bool installationCompleted = true;
			while(installationCompleted){
				Report.Log(ReportLevel.Info,"waiting for final screen");
				if(repo.InstallScreen.ButtonFinishInfo.Exists()){
					repo.InstallScreen.CheckBoxLaunchApp.Uncheck();
					Delay.Seconds(2);
					repo.InstallScreen.ButtonFinish.MoveTo();
					repo.InstallScreen.ButtonFinish.Click();
					installationCompleted = false;
				}
			}

		}
		
		public void pathnotexists()
		{
			var pathNotExist = repo.PathNotExist;
			
			if(pathNotExist.SelfInfo.Exists())
			{
				//var buttonYes = repo.PathNotExist.ButtonYes;
				//Click Yes Button
				Delay.Seconds(2);
				pathNotExist.ButtonYes.MoveTo();
				pathNotExist.ButtonYes.Press();
				
			}

			

		}
		
		
		public void Addinstance(string username,string password,string instancename)
		{
			
			var repo=SWA_1_6_5_Release_Specific_Test_casesRepository.Instance;
			var https10220201289291Gui460Rende = repo.Https10220201289291Gui460Rende;
			
			Report.Log(ReportLevel.Info,username);
			Report.Log(ReportLevel.Info,password);
			Report.Log(ReportLevel.Info,instancename);
			
			Delay.Seconds(5);
			
			https10220201289291Gui460Rende.ADMINISTRATION.MoveTo();
			https10220201289291Gui460Rende.ADMINISTRATION.Click();
			
			
			//User is on the admin page
			Delay.Seconds(5);
			https10220201289291Gui460Rende.AddSQLServerInstance.MoveTo();
			https10220201289291Gui460Rende.AddSQLServerInstance.Click();
			Delay.Seconds(10);
			https10220201289291Gui460Rende.NextButton.MoveTo();
			https10220201289291Gui460Rende.NextButton.Click();
			Delay.Seconds(5);
			//instanc Name
			https10220201289291Gui460Rende.MInstancename.Focus();
			https10220201289291Gui460Rende.MInstancename.PressKeys(instancename);
			Delay.Seconds(5);
			//user name
			https10220201289291Gui460Rende.MSqluser.Focus();
			https10220201289291Gui460Rende.MSqluser.PressKeys(username);
			Delay.Seconds(5);
			//password
			https10220201289291Gui460Rende.MSqlpassword.Focus();
			https10220201289291Gui460Rende.MSqlpassword.PressKeys(password);
			Delay.Seconds(5);
			https10220201289291Gui460Rende.NextButton.MoveTo();
			https10220201289291Gui460Rende.NextButton.Click();
			Delay.Seconds(5);
			Validate.AttributeEqual(https10220201289291Gui460Rende.NextButton1Info,"visible","true");
			https10220201289291Gui460Rende.NextButton1.MoveTo();
			https10220201289291Gui460Rende.NextButton1.PerformClick();
			
		}
		
	}
}
