///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SWA_1_6_5_Release_Specific_Test_cases
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The SQLWA864_Verify_if_all_the_machines_are_being_displayed_under_Top_Machines_widget_when_time_interval_is_cha recording.
    /// </summary>
    [TestModule("94297229-5a05-4f60-b591-0f4da375718e", ModuleType.Recording, 1)]
    public partial class SQLWA864_Verify_if_all_the_machines_are_being_displayed_under_Top_Machines_widget_when_time_interval_is_cha : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SWA_1_6_5_Release_Specific_Test_casesRepository repository.
        /// </summary>
        public static SWA_1_6_5_Release_Specific_Test_casesRepository repo = SWA_1_6_5_Release_Specific_Test_casesRepository.Instance;

        static SQLWA864_Verify_if_all_the_machines_are_being_displayed_under_Top_Machines_widget_when_time_interval_is_cha instance = new SQLWA864_Verify_if_all_the_machines_are_being_displayed_under_Top_Machines_widget_when_time_interval_is_cha();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public SQLWA864_Verify_if_all_the_machines_are_being_displayed_under_Top_Machines_widget_when_time_interval_is_cha()
        {
            Password = "control*88";
            instancename = "WIN10SQL17";
            Username = "simpsons\\administrator";
            Url = "https://localhost:9291/login";
            Username1 = "sa";
            instancename1 = "DEV-RAHUL-001";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static SQLWA864_Verify_if_all_the_machines_are_being_displayed_under_Top_Machines_widget_when_time_interval_is_cha Instance
        {
            get { return instance; }
        }

#region Variables

        string _Password;

        /// <summary>
        /// Gets or sets the value of variable Password.
        /// </summary>
        [TestVariable("c036797e-dec7-49e5-9279-96e381c8b81b")]
        public string Password
        {
            get { return _Password; }
            set { _Password = value; }
        }

        string _Username;

        /// <summary>
        /// Gets or sets the value of variable Username.
        /// </summary>
        [TestVariable("81f462c2-1914-4035-9832-bd8e3a47633f")]
        public string Username
        {
            get { return _Username; }
            set { _Username = value; }
        }

        string _Url;

        /// <summary>
        /// Gets or sets the value of variable Url.
        /// </summary>
        [TestVariable("90f3ac7d-8951-4a46-bb7e-acb6cc8841c6")]
        public string Url
        {
            get { return _Url; }
            set { _Url = value; }
        }

        string _Username1;

        /// <summary>
        /// Gets or sets the value of variable Username1.
        /// </summary>
        [TestVariable("e40c6050-3905-42d1-9417-c104334aa6aa")]
        public string Username1
        {
            get { return _Username1; }
            set { _Username1 = value; }
        }

        string _instancename1;

        /// <summary>
        /// Gets or sets the value of variable instancename1.
        /// </summary>
        [TestVariable("d5a6061b-e504-4f20-bd7b-b95676b3d08b")]
        public string instancename1
        {
            get { return _instancename1; }
            set { _instancename1 = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable instancename.
        /// </summary>
        [TestVariable("0e534a29-dc2a-4681-aec1-5deaa9c2646a")]
        public string instancename
        {
            get { return repo.InstanceName; }
            set { repo.InstanceName = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // STEP 1 : Under Homepage -> Navigate to 'Top Machines' widget. Try changing the intervals 1 by 1 from [15M] to [4W]
            Report.Log(ReportLevel.Info, "Section", "STEP 1 : Under Homepage -> Navigate to 'Top Machines' widget. Try changing the intervals 1 by 1 from [15M] to [4W]", new RecordItemIndex(0));
            
            CommonUtilities.SWAWebCommon.Login(Url, Username, Password);
            Delay.Milliseconds(0);
            
            // STEP 2  :  From Administration tab, try removing the servers which are added and verify if the machines are also removed from 'Top Machines' widget
            Report.Log(ReportLevel.Info, "Section", "STEP 2  :  From Administration tab, try removing the servers which are added and verify if the machines are also removed from 'Top Machines' widget", new RecordItemIndex(2));
            
            CommonUtilities.SWAWebCommon.NavigatetoDashboard();
            Delay.Milliseconds(0);
            
            validateTopMachines(instancename);
            Delay.Milliseconds(0);
            
            addNewInstance(instancename1, Username1, Password);
            Delay.Milliseconds(0);
            
            removeInstance(instancename1);
            Delay.Milliseconds(0);
            
            CommonUtilities.SWAWebCommon.Logout();
            Delay.Milliseconds(0);
            
            CommonUtilities.SWAWebCommon.closeBrowser();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
